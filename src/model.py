from pubsub import Publisher

class ServerModel:
    def __init__(self):
        self.messages = []
        self.messageBoxes = {}

    def connectMessageBox(self, addr):
        self.messageBoxes[addr] = []
        for m in self.messages:
            self.messageBoxes[addr].append(m)

    def receiveMessage(self, m):
        self.messages.append(m)
        for addr in self.messageBoxes:
            self.messageBoxes[addr].append(m)

    def getAllMessages(self, addr):
        buf = b""
        for m in self.messageBoxes[addr]:
            buf += m
        return buf

    def clearMessages(self, addr):
        self.messageBoxes[addr] = []


# the events generated by a Model instance 
clientModelEvents = ["msg_received", "msg_sent"]

class ClientModel(Publisher):
    def __init__(self):
        self.received = []
        self.sent = []
        Publisher.__init__(self, clientModelEvents)

    def receiveMessage(self, m):
        self.received.append(m)
        Publisher.dispatch(self, "msg_received", (self.received, m))
 
    def addSentMessage(self, m):
        self.sent.append(m)
        Publisher.dispatch(self, "msg_sent", (self.sent, m))
